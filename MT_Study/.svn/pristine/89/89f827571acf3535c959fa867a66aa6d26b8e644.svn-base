package alarms;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Calendar;

import com.example.mt_study.R;
import com.example.statics.Statics;

import android.app.Activity;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.TimePicker;
import android.widget.Toast;







public class ManageAlarms extends Activity {
	
	
	TimePicker timePicker;
	DatePicker datePicker;
	Calendar myCal;
	Button setAlarm;
	private String assignmentName;
	public static int counter = 0;
	
	
	@Override
	public void onCreate(Bundle SavedInstanceState) {
		super.onCreate(SavedInstanceState);
		Intent receive = getIntent();
		assignmentName = receive.getStringExtra("AssignmentName");
		setContentView(R.layout.alarm_set);
		initControls();
	}
	
	
	public void initControls() {
		timePicker = (TimePicker)findViewById(R.id.timePicker);
		datePicker = (DatePicker)findViewById(R.id.datePicker);
		setAlarm = (Button)findViewById(R.id.setAlarm);
		myCal = Calendar.getInstance();
		

		
		
		//will set the alarm for the first time if the user doesn't restart their
		//phone this alarm will go off. 
		setAlarm.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE); 
				
				myCal.set(Calendar.YEAR, datePicker.getYear());
				myCal.set(Calendar.MONTH, datePicker.getMonth());
				myCal.set(Calendar.DAY_OF_MONTH, datePicker.getDayOfMonth());
				myCal.set(Calendar.HOUR_OF_DAY, timePicker.getCurrentHour());
				myCal.set(Calendar.MINUTE, timePicker.getCurrentMinute());
				myCal.set(Calendar.SECOND, 0);
				
				//precaution if the user restarts their phone. Saves the alarm to a file
				//and when user restarts their phone register a broadcast receiver to pick up
				//the broadcast and then re-create the alarms that were stored. 
				setAlarms(datePicker.getYear(), datePicker.getMonth(), datePicker.getDayOfMonth()
						, timePicker.getCurrentHour(), timePicker.getCurrentMinute(), assignmentName);
				
				Intent triggered = new Intent(ManageAlarms.this, alarms.DisplayNotification.class);
				triggered.putExtra("NotificationId", counter);
				triggered.putExtra("assignmentName", assignmentName);
				
				PendingIntent displayIntent = PendingIntent.getActivity(
	                    ManageAlarms.this, counter, triggered, 0);
				
				/*boolean alarmActive = (PendingIntent.getActivity(getBaseContext(), 0,
						triggered, PendingIntent.FLAG_NO_CREATE) != null);
				
				if (alarmActive) {
					alarmManager.cancel(displayIntent);
				}*/
				alarmManager.cancel(displayIntent);
				
				alarmManager.set(AlarmManager.RTC_WAKEUP, 
	                    myCal.getTimeInMillis(), displayIntent);
				counter++;
				
				
			}
		});
	
	}
	
	@Override
	public void onPause() {
		super.onPause();
		
	}
	
	@Override
	public Object onRetainNonConfigurationInstance()
	{
		return timePicker;
	}
	
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		// TODO Auto-generated method stub
		super.onConfigurationChanged(newConfig);
		timePicker = (TimePicker)getLastNonConfigurationInstance();
	}


	//function to save the alarm into a file for resetting it later.
	public void setAlarms(int year, int month, int DoM, Integer hour, Integer minute, String assignmentName) {
		try {
			FileOutputStream fos = ManageAlarms.this.openFileOutput(Statics.ALARMS_FILENAME, Context.MODE_APPEND);
			OutputStreamWriter osw = new OutputStreamWriter(fos);
			osw.write(assignmentName + "<GAY>" + year + "<GAY>" + month + 
					"<GAY>" + DoM + "<GAY>" + hour + "<GAY>" + minute + "<GAY>");
			
			osw.flush();
			osw.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}